--- Program ---
Program         = "program" Name FuncArgs FuncBody { OtherFunc }

--- Functions ---
OtherFunc       = "function" Name FuncArgs FuncBody
FuncArgs        = "(" ( [Type Name] | (Type Name { "," Type Name }) ) ")"
FuncBody        = "{" { Statement } ReturnInstr ";" "}"
ReturnInstr     = "return" RValue

--- Statements ---
Statement       = Instruction | IfBlock | WhileStatement | LineComment
Instruction     = (VarDeclaration | ConstDeclaration | Assignment | FuncCall | ReturnInstr) ";"
IfBlock         = IfStatement { "else" IfStatement } [ "else" (Body | SingleInstr) ]
IfStatement     = "if" "(" LogicalExpr ")" (Body | SingleInstr)
WhileStatement  = "while" "(" LogicalExpr ")" Body
LineComment     = "//" String "\n"

--- Instructions ---
VarDeclaration  = "var" ( (Type Name) | TypeAssignment )
ConstDeclaration= "const" TypeAssignment
FuncCall        = Name "(" ([ RValue ] | RValue { "," RValue }) ")"
Assignment      = Name "=" [ "<" Type ">" ] RValue
TypeAssignment  = IntAssign | FloatAssign | StringAssignment | BoolAssign
IntAssign       = IntType Name "=" [ "<" IntType | FloatType | BoolType ">" ] RValue
FloatAssign     = FloatType Name "=" [ "<" IntType | FloatType ">" ] RValue
StringAssign    = StringType Name "=" [ "<" IntType | FloatType | BoolType | StringAssign ">" ] RValue
BoolAssign      = BoolType Name "=" [ "<" IntType | BoolType ">" ] RValue

--- Expressions ---
LogicalExpr     = ((LogicalExpr | RelationExpr | FuncCall) LogicalOp (LogicalExpr | RelationExpr | FuncCall))  |
                  ("(" (LogicalExpr | RelationExpr | FuncCall) LogicalOp (LogicalExpr | RelationExpr | FuncCall) ")")
RelationExpr    = ("(" (Name | ArithmeticExpr) RelationOp RValue ")") |
                  ((Name | ArithmeticExpr) RelationOp RValue)
LogicalOp       = "||" | "&&"
RelationOp      = "==" | "!=" | "<" | ">" | "<=" | ">="

ArithmeticExpr  = ((Number | Name | ArithmeticExpr) ArithmeticOp (Number | Name | ArithmeticExpr))  |
                  ("(" (Number | Name | ArithmeticExpr) ArithmeticOp (Number | Name | ArithmeticExpr) ")")
ArithmeticOp    = "+" | "-" | "*" | "/" | "%"

--- Types ---
Type            = IntType | FloatType | StringType | BoolType
IntType         = "int"
FloatType       = "float"
StringType      = "string"
BoolType        = "bool"

--- Other ---
Body            = "{" { Statement } "}"
SingleInstr     = {LineComment} Statement {LineComment}
RValue          = Value | Name | ArithmeticExpr
Name            = (Letter | "_") {Letter | Digit | "_" }
Value           = String | Number | BoolValue
String          = """ { AsciiChar } """
Letter          = "a".."z" | "A".."Z"
Number          = [Sign] Digit { Digit } [ "." Digit { Digit } ]
Digit           = "0".."9"
BoolValue       = "true" | "false"
Sign            = [ "-" ]
AsciiChar       = <every ASCII character>
